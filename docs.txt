Обновления интерфейса и паттерны (важно для AI):

- Кнопка «Сохранить» (экраны Add/Edit): всегда фиксируем над таб-баром и safe area.
  - Используем `useBottomTabBarHeight()` и `useSafeAreaInsets()`.
  - Позиция: `bottom = tabBarHeight + insets.bottom + 12`.
  - Контент-области добавляем динамический `paddingBottom`, чтобы ничего не перекрывалось.

- Валидация на Add/Edit: только фирменная модалка.
  - Не использовать системный `Alert`.
  - Использовать `components/ui/ConfirmDialog`.
  - Для простого уведомления без отмены — `showCancel={false}`, кнопка «Понятно».

- Цвета/фон: белых панелей быть не должно.
  - Для стека вкладки Add/Edit выключен хедер (`headerShown: false`).
  - Установлен тёмный фон контента стека: `contentStyle: { backgroundColor: '#0b1616' }`.
  - Первый экран (Home): корневой контейнер `flex-1 bg-primary-900`, `FlatList` с `style={{flex:1}}`.

- Общие правила:
  - Не накрывать системный home‑индикатор и таб‑бар.
  - Учитывать клавиатуру (KeyboardAvoidingView на iOS с `behavior='padding'`).
  - Держать доступность: зона касания ≥ 44pt, контраст из палитры `primary`.

Ссылки на изменения:
- app/(tabs)/add.tsx — фиксация кнопки, модалка в стиле приложения.
- app/(tabs)/edit.tsx — фиксация кнопки как на Add.
- components/ui/ConfirmDialog.tsx — `showCancel` для одиночной кнопки.
- app/(tabs)/_layout.tsx — скрыт хедер, задан тёмный фон.
- screens/CardListScreen.tsx — растянут тёмный фон, паддинг списка.

Следовать этим паттернам для новых экранов и правок.

Дополнительные сведения о приложении (для другого ИИ):

- Архитектура/навигация:
  - Используется `expo-router` с вкладками в `app/_layout.tsx` (Tabs: `index`, `card`, `add`). Хедер скрыт, тёмный фон.
  - Основные экраны:
    - Список карточек: `app/index.tsx` → `screens/CardListScreen.tsx`.
    - Просмотр карточки: `app/card.tsx` → `screens/MainCardScreen.tsx`.
    - Добавление: `app/(tabs)/add.tsx`.
    - Редактирование: `app/(tabs)/edit.tsx` (переход из списка и из карточки с `id`).
  - В `MainCardScreen` карточка грузится по `id` из query или первая/последняя. Есть свайпы влево/вправо (prev/next) и удаление с подтверждением.

- База данных (expo-sqlite):
  - Инициализация: `database/database.ts` через `initDatabase()` (вызов в `app/_layout.tsx`).
  - Таблицы:
    - `cards(id INTEGER PK, word TEXT NOT NULL, translation TEXT NOT NULL, explanation TEXT, transcription TEXT, created_at DATETIME DEFAULT CURRENT_TIMESTAMP)`
    - `examples(id INTEGER PK, card_id INTEGER NOT NULL, sentence TEXT NOT NULL, FK → cards(id) ON DELETE CASCADE)`
  - Есть мягкая миграция: при init добавляются недостающие колонки `explanation`, `transcription` (ALTER TABLE; ошибки игнорируются).
  - Модель: `models/CardModel.ts` (методы: `all`, `find`, `findByWord`, `findById`, `create`, `update`, `delete`, `nextCard`, `prevCard`, `firstCard`, `lastCard`).
  - Типы: `types/TCard.ts`, `types/TExample` (карточка возвращается вместе с массивом `examples`).

- Правила UX/верстки:
  - Тёмная тема: корневые контейнеры `flex-1 bg-primary-900`; избегать белых панелей.
  - Safe area и вкладки: не перекрывать home-индикатор и таб-бар.
  - Клавиатура: на iOS использовать `KeyboardAvoidingView` с `behavior='padding'` на формах Add/Edit.
  - На Add/Edit кнопка «Сохранить» зафиксирована поверх контента: позиционирование `bottom = tabBarHeight + insets.bottom + 12`. Контенту — дополнительный `paddingBottom`.

- Валидация и уведомления:
  - Валидация на Add/Edit — через `components/ui/ConfirmDialog` (фирменная модалка). Для простого уведомления без отмены — `showCancel={false}`, кнопка «Понятно».
  - Системные `Alert` не использовать.
  - Уведомления успеха/ошибки — не модалка, а тост: `components/ui/Toast.tsx` (позиция по умолчанию top, авто скрытие; типы: `success|error|info`).
  - Реализация тостов в Add/Edit: показывается при сохранении/ошибке; после успеха небольшой delay и переход.

- Потоки после сохранения:
  - Add (`app/(tabs)/add.tsx`): при успехе показывает тост «Карточка сохранена», затем `router.replace('/')` (в список) с задержкой ~600мс.
  - Edit (`app/(tabs)/edit.tsx`): при успехе тост «Изменения сохранены», затем `router.replace('/card?id=...')` (возврат на ту же карточку) с задержкой ~600мс.

- Отображение карточки:
  - Компонент передней стороны: `components/card/FrontCard.tsx` — показывает `word`, затем `transcription` (важно: именно транскрипция должна сохраняться и выводиться), список примеров на границе.
  - Навигация и действия (редактировать/удалить) реализованы в `screens/MainCardScreen.tsx` и `components/card/FlipCardNavigator`.

- Кнопки и эффекты нажатия:
  - Общий компонент: `components/ui/Button.tsx` (props: `title`, `onPress`, `variant='primary'|'secondary'`, `className`).
  - Визуал нажатия: `Pressable` с ripple на Android; на iOS уменьшение scale и затемнение фона (primary → `#0d9488`, secondary → `#1e4747`).

- Поиск и навигация карточек:
  - Поиск в `MainCardScreen`: `findByWord` по `word`/`translation` (COLLATE NOCASE), обновляет текущую карточку.
  - Свайпы: `prevCard`/`nextCard`, при отсутствии циклично переходят к `lastCard`/`firstCard`.
  - Удаление: через `ConfirmDialog`, затем выбирается соседняя карточка (next → prev), иначе состояние очищается.

- Прочее:
  - Цвета/палитра: `tailwind.config.js` (`primary`, `accent`). Проекты используют NativeWind; классы tailwind в `className`.
  - `CardListScreen.tsx`: список карточек, навигация на карточку и редактирование по id.
  - Старайтесь держать размеры зоны касания ≥ 44pt и контраст из палитры `primary`.

Мультиязычность и папки-словари (NEW)

- Архитектура данных:
  - Таблица `languages(id PK, name TEXT UNIQUE NOT NULL, code TEXT, icon TEXT, created_at)` — языки обучения.
  - Таблица `dictionaries(id PK, language_id INTEGER NOT NULL FK→languages(id) ON DELETE CASCADE, name TEXT NOT NULL, color TEXT, sort_order INTEGER DEFAULT 0, created_at)` — папки-словари внутри языка.
  - Таблица `cards` дополнена колонкой `dictionary_id INTEGER FK→dictionaries(id)`; все существующие записи бэкофиллятся в словарь `Default` языка `English`.
  - Индексы: `idx_cards_dictionary (cards.dictionary_id)`, `idx_cards_word (cards.dictionary_id, word COLLATE NOCASE)`, `idx_examples_card_id (examples.card_id)`.

- Миграции/инициализация:
  - При `initDatabase()` создаются таблицы `languages` и `dictionaries` (если нет).
  - Гарантируется наличие языка `English (code: en)` и словаря `Default` для него.
  - Для карточек без `dictionary_id` — проставляется `Default`.

- Типы и модели:
  - Типы: `types/TLanguage.ts`, `types/TDictionary.ts`; `types/TCard.ts` расширен полем `dictionaryId?`.
  - `LanguageModel`: `all`, `findById`, `create`, `update`, `delete`, `firstOrCreateDefault`.
  - `DictionaryModel`: `allByLanguage(languageId)`, `findById`, `create`, `update`, `delete`, `firstOrCreateDefaultForLanguage(languageId)`; в `allByLanguage` дополнительно возвращается `cardsCount`.
  - `CardModel` обновлён: методы принимают опциональный `dictionaryId` для фильтрации внутри словаря; `create` требует `dictionaryId`.
    - `all(limit, offset, dictionaryId?)`
    - `find(text, dictionaryId?)`
    - `findByWord(text, dictionaryId?)`
    - `firstCard(dictionaryId?)`, `lastCard(dictionaryId?)`, `nextCard(currentID, dictionaryId?)`, `prevCard(currentID, dictionaryId?)`
    - `create(word, translation, transcription|null, examples[], rating=0, dictionaryId)`

- Контекст приложения:
  - `context/AppContext.tsx` хранит `currentLanguageId` и `currentDictionaryId` и выставляет их по умолчанию при старте (English → Default).
  - Оборачивает приложение в `app/_layout.tsx` через `<AppProvider>`.

- Текущее поведение по умолчанию:
  - Все новые карточки (экраны Add) сохраняются в текущий словарь из контекста. Если не установлен — показывается тост об ошибке.
  - По умолчанию после первого запуска текущими становятся `English` и словарь `Default`.

- Рекомендации по использованию в экранах (паттерны):
  - Получайте `currentDictionaryId` из `useAppContext()` и всегда передавайте его в методы `CardModel` для выборок/поиска/навигации по карточкам.
    - Пример: `CardModel.all(20, 0, currentDictionaryId)`, `CardModel.find(search, currentDictionaryId)`, `CardModel.firstCard(currentDictionaryId)`.
  - На Add/Edit:
    - Add: сохраняйте с `CardModel.create(..., dictionaryId: currentDictionaryId)`.
    - Edit: опционально добавьте возможность перемещения карточки в другой словарь (изменение `dictionary_id`).
  - В списке и на экране карточки рекомендуется фильтровать карточки по активному словарю (UI для выбора описан ниже).

- UI/UX (план):
  - Быстрый выбор: строка чипов для Языков и Словарей над поиском в списке. Активный чип меняет контекст; рядом кнопка «+» для создания.
  - Экран «Библиотека» (новая вкладка):
    - Языки: список с иконкой/кодом, счётчиком словарей, действия: Переименовать, Удалить (ConfirmDialog), Сделать по умолчанию.
    - Словари выбранного языка: список с цветом, cardsCount, drag-sorting, действия: Переименовать, Цвет, Удалить, Экспорт.
  - Выбор словаря при создании: модалка-пикер словаря в Add/Edit с CTA «Создать новый словарь».

- CRUD-потоки и подтверждения:
  - Удаление языка — каскад на словари/карточки; всегда подтверждать через `ConfirmDialog`.
  - Удаление словаря — предлагать вариант переноса карточек в другой словарь того же языка или удаление вместе со словарём.
  - Экспорт/импорт словаря (CSV) — формат: `word,translation,transcription,rating,examples` (примеры через `;`). Значения экранируются кавычками. Экспорт/импорт доступен во вкладке «Библиотека».

- Доступность и стили (важно соблюдать):
  - Сохранять тёмную палитру; панели/модалки — `primary-800/300` и акценты `accent-600`/`-700`.
  - Подтверждения и уведомления: только `components/ui/ConfirmDialog` и `components/ui/Toast` (без системного `Alert`).
  - Фиксация CTA-кнопок: как на Add/Edit (`bottom = tabBarHeight + insets.bottom + 12`), контент — с дополнительным `paddingBottom`.
  - Клавиатура: `KeyboardAvoidingView` на iOS (`behavior='padding'`).

- Следующие шаги (для реализации UI):
  - Добавить вкладку/экран «Библиотека» с CRUD языков/словарей.
  - В `CardListScreen` и `MainCardScreen` подключить фильтрацию по `currentDictionaryId` и добавить чипы выбора.
  - В Edit добавить перенос карточки между словарями.
